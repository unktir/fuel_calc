stages:
  - build
  - test
  - deploy

variables:
  FRONTEND_IMAGE: frontend
  BACKEND_IMAGE: backend
  NGINX_IMAGE: nginx
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

build_frontend:
  stage: build
  script:
    - echo "Сборка frontend контейнера..."
    - docker build -t frontend:$IMAGE_TAG ./frontend
    - docker tag frontend:$IMAGE_TAG $HARBOR_URL_TAG/$HARBOR_PROJECT/frontend:$IMAGE_TAG
    - echo $HARBOR_PASSWORD | docker login $HARBOR_URL -u $HARBOR_USER --password-stdin
    - docker push $HARBOR_URL/$HARBOR_PROJECT/frontend:$IMAGE_TAG

build_backend:
  stage: build
  script:
    - echo "Сборка backend контейнера..."
    - docker build -t backend:$IMAGE_TAG ./backend
    - docker tag backend:$IMAGE_TAG $HARBOR_URL_TAG/$HARBOR_PROJECT/backend:$IMAGE_TAG
    - echo $HARBOR_PASSWORD | docker login $HARBOR_URL -u $HARBOR_USER --password-stdin
    - docker push $HARBOR_URL/$HARBOR_PROJECT/backend:$IMAGE_TAG

build_nginx:
  stage: build
  script:
    - echo "Сборка nginx контейнера..."
    - docker build -t nginx:$IMAGE_TAG ./nginx
    - docker tag nginx:$IMAGE_TAG $HARBOR_URL_TAG/$HARBOR_PROJECT/nginx:$IMAGE_TAG
    - echo $HARBOR_PASSWORD | docker login $HARBOR_URL -u $HARBOR_USER --password-stdin
    - docker push $HARBOR_URL/$HARBOR_PROJECT/nginx:$IMAGE_TAG


test_frontend:
  stage: test
  image: node:16  
  cache:
    key: frontend-deps
    paths:
      - frontend/node_modules/  # Кэшируем node_modules для ускорения последующих запусков
  script:
    - echo "Запускаем lint тест..."
    - cd frontend
    - npm ci  
    - npm run lint  

#test_backend:
#  stage: test
#  image: python:3.9-slim 
#  cache:
#    key: backend-deps
#    paths:
#      - backend/.venv/  
#  before_script:
#    - apt-get update && apt-get upgrade -y
#  script:
#    - echo "Устанавливаем зависимости и запускаем тесты..."
#    - cd backend
#    - python -m venv .venv  
#    - source .venv/bin/activate 
#    - pip install --upgrade pip  
#    - pip install -r requirements.txt 
#    - python -m pytest  

deploy:
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa

    - echo "StrictHostKeyChecking no" >> ~/.ssh/config
  script:
    - echo "Деплоим на сервер..."
    - ssh $SERVER_USER@$SERVER_IP -p 2222 "      
        echo $HARBOR_PASSWORD | docker login $HARBOR_URL -u $HARBOR_USER --password-stdin &&
        cd /home/ais-project/fuel_forecast_app/ &&
        docker compose down &&
        docker compose pull &&
        docker compose up -d
      "
  only:
    - main  