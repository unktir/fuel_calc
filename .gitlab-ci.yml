stages:
  - build
  - test
  - deploy

variables:
  FRONTEND_IMAGE: frontend
  BACKEND_IMAGE: backend
  NGINX_IMAGE: nginx
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

build_frontend:
  stage: build
  script:
    - echo "Сборка frontend контейнера..."
    - docker build -t frontend:$IMAGE_TAG ./frontend
    - docker tag frontend:$IMAGE_TAG $HARBOR_URL_TAG/$HARBOR_PROJECT/frontend:$IMAGE_TAG
    - echo $HARBOR_PASSWORD | docker login $HARBOR_URL -u $HARBOR_USER --password-stdin
    - docker push $HARBOR_URL/$HARBOR_PROJECT/frontend:$IMAGE_TAG

build_backend:
  stage: build
  script:
    - echo "Сборка backend контейнера..."
    - docker build -t backend:$IMAGE_TAG ./backend
    - docker tag backend:$IMAGE_TAG $HARBOR_URL_TAG/$HARBOR_PROJECT/backend:$IMAGE_TAG
    - echo $HARBOR_PASSWORD | docker login $HARBOR_URL -u $HARBOR_USER --password-stdin
    - docker push $HARBOR_URL/$HARBOR_PROJECT/backend:$IMAGE_TAG

build_nginx:
  stage: build
  script:
    - echo "Сборка nginx контейнера..."
    - docker build -t nginx:$IMAGE_TAG ./nginx
    - docker tag nginx:$IMAGE_TAG $HARBOR_URL_TAG/$HARBOR_PROJECT/nginx:$IMAGE_TAG
    - echo $HARBOR_PASSWORD | docker login $HARBOR_URL -u $HARBOR_USER --password-stdin
    - docker push $HARBOR_URL/$HARBOR_PROJECT/nginx:$IMAGE_TAG


test_frontend:
  stage: test
  image: node:16  # Используем официальный образ Node.js
  cache:
    key: frontend-deps
    paths:
      - frontend/node_modules/  # Кэшируем node_modules для ускорения последующих запусков
  script:
    - echo "Запускаем lint тест..."
    - cd frontend
    - npm ci  
    - npm run lint  

test_backend:
  stage: test
  image: python:3.9-slim 
  cache:
    key: backend-deps
    paths:
      - backend/.venv/  
  before_script:
    - apt-get update && apt-get upgrade -y
  script:
    - echo "Устанавливаем зависимости и запускаем тесты..."
    - cd backend
    - python -m venv .venv  # Создаем виртуальное окружение
    - source .venv/bin/activate  # Активируем виртуальное окружение
    - pip install --upgrade pip  # Обновляем pip
    - pip install -r requirements.txt  # Устанавливаем зависимости
    - python -m pytest  # Запускаем тесты

deploy:
  stage: deploy
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "StrictHostKeyChecking no" >> ~/.ssh/config
  script:
    - echo "Деплоим на сервер..."
    - ssh $SERVER_USER@$SERVER_IP "      
        docker login $HARBOR_URL -u $HARBOR_USER -p $HARBOR_PASSWORD &&
        docker-compose down &&
        docker-compose pull &&
        docker-compose up -d
      "
  only:
    - main  # Запускать только для ветки main